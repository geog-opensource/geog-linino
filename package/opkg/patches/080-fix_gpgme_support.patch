diff -Naurd opkg-618.orig//libopkg/opkg_download.c opkg-618/libopkg/opkg_download.c
--- opkg-618.orig//libopkg/opkg_download.c	2011-04-08 15:33:11.000000000 +0200
+++ opkg-618/libopkg/opkg_download.c	2013-05-22 15:20:28.000000000 +0200
@@ -343,75 +343,111 @@
 opkg_verify_file (char *text_file, char *sig_file)
 {
 #if defined HAVE_GPGME
-    if (conf->check_signature == 0 )
-        return 0;
     int status = -1;
+    int ret = -1;
     gpgme_ctx_t ctx;
+    int have_ctx = 0;
     gpgme_data_t sig, text, key;
+    int have_sig = 0, have_text = 0, have_key = 0;
     gpgme_error_t err;
     gpgme_verify_result_t result;
     gpgme_signature_t s;
+    gpgme_protocol_t protocol = GPGME_PROTOCOL_OpenPGP;
     char *trusted_path = NULL;
 
+    if (conf->check_signature == 0 )
+        return 0;
+
     gpgme_check_version (NULL);
 
     err = gpgme_new (&ctx);
+    if (err) {
+	opkg_msg(ERROR, "Unable to create gpgme context: %s\n", gpg_strerror(err));
+	goto out_err;
+    }
+    have_ctx = 1;
 
-    if (err)
-	return -1;
+    err = gpgme_set_protocol (ctx, protocol);
+    if (err) {
+	opkg_msg(ERROR, "Unable to set gpgme protocol to OpenPGP: %s\n", gpg_strerror(err));
+	goto out_err;
+    }
+
+    /* gpgme doesn't like empty strings */
+    if (conf->offline_root) {
+	sprintf_alloc(&trusted_path, "%s/%s", conf->offline_root, "/etc/opkg/trusted.gpg");
+    } else {
+	sprintf_alloc(&trusted_path, "%s", "/etc/opkg/trusted.gpg");
+    }
+
+    if (!trusted_path) {
+	opkg_msg(ERROR, "Out of memory!\n");
+	goto out_err;
+    }
 
-    sprintf_alloc(&trusted_path, "%s/%s", conf->offline_root, "/etc/opkg/trusted.gpg");
     err = gpgme_data_new_from_file (&key, trusted_path, 1);
-    free (trusted_path);
-    if (err)
-    {
-      return -1;
+    if (err) {
+	opkg_msg(ERROR, "Unable to get data from file %s: %s\n", trusted_path, gpg_strerror(err));
+	goto out_err;
     }
+    have_key = 1;
+
     err = gpgme_op_import (ctx, key);
-    if (err)
-    {
-      gpgme_data_release (key);
-      return -1;
+    if (err) {
+	opkg_msg(ERROR, "Unable to import key from file %s: %s\n", trusted_path, gpg_strerror(err));
+	goto out_err;
     }
-    gpgme_data_release (key);
 
     err = gpgme_data_new_from_file (&sig, sig_file, 1);
-    if (err)
-    {
-	gpgme_release (ctx);
-	return -1;
+    if (err) {
+	opkg_msg(ERROR, "Unable to get data from file %s: %s\n", sig_file, gpg_strerror(err));
+	goto out_err;
     }
+    have_sig = 1;
 
     err = gpgme_data_new_from_file (&text, text_file, 1);
-    if (err)
-    {
-        gpgme_data_release (sig);
-	gpgme_release (ctx);
-	return -1;
+    if (err) {
+	opkg_msg(ERROR, "Unable to get data from file %s: %s\n", text_file, gpg_strerror(err));
+	goto out_err;
     }
+    have_text = 1;
 
     err = gpgme_op_verify (ctx, sig, text, NULL);
+    if (err) {
+	opkg_msg(ERROR, "Unable to verify signature: %s\n", gpg_strerror(err));
+	goto out_err;
+    }
 
     result = gpgme_op_verify_result (ctx);
-    if (!result)
-	return -1;
+    if (!result) {
+	opkg_msg(ERROR, "Unable to get verification data: %s\n", gpg_strerror(err));
+	goto out_err;
+    }
 
     /* see if any of the signitures matched */
     s = result->signatures;
-    while (s)
-    {
+    while (s) {
 	status = gpg_err_code (s->status);
-	if (status == GPG_ERR_NO_ERROR)
+	if (status == GPG_ERR_NO_ERROR) {
+	    ret = 0;
 	    break;
+	}
 	s = s->next;
     }
 
+out_err:
+    if (have_sig)
+	gpgme_data_release (sig);
+    if (have_text)
+	gpgme_data_release (text);
+    if (have_key)
+	gpgme_data_release (key);
+    if (trusted_path)
+	free (trusted_path);
+    if (have_ctx)
+	gpgme_release (ctx);
 
-    gpgme_data_release (sig);
-    gpgme_data_release (text);
-    gpgme_release (ctx);
-
-    return status;
+    return ret;
 #elif defined HAVE_OPENSSL
     X509_STORE *store = NULL;
     PKCS7 *p7 = NULL;
